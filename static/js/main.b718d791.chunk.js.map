{"version":3,"sources":["serviceWorker.js","components/todo/Nav.js","components/Header.js","components/todo/AddTodoForm.js","components/hoc/LoaderHoc.js","components/todo/DisplayTodoList.js","components/todo/TodoHome.js","utils/http.js","constants/api.js","services/todo.js","components/todo/CompletedTodoLists.js","components/todo/InCompleteTodoList.js","components/todo/App.js","components/tags/AddTags.js","components/tags/DisplayTagsList.js","services/tags.js","components/tags/Main.js","constants/routes.js","components/AppRouter.js","index.js"],"names":["Boolean","window","location","hostname","match","Nav","_ref","handleComponentRender","react_default","a","createElement","className","onClick","Header","AddTodoForm","inputTodoValue","_ref$addTodo","addTodo","f","_ref$handleTextChange","handleTextChange","type","value","placeholder","onKeyUp","onChange","text","proTypes","PropTypes","func","isRequired","any","withLoader","WrappedComponent","_React$Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","props","todos","tagsList","length","React","Component","_this$props","editTodo","deleteTodo","handleChange","markTodoComplete","map","index","id","web","from","opacity","to","config","duration","style","isEditedTodo","todo","e","checked","isTodoCompleted","date","disabled","TodoHome","isEdited","todo_AddTodoForm","todo_DisplayTodoList","assign","http","axios","create","baseURL","api","TODOS","TAGS","mapResponseToTodo","objectSpread","mapTodoToResponse","description","_callee","data","regenerator_default","wrap","_context","prev","next","get","API","sent","item","abrupt","Promise","resolve","t0","reject","stop","_callee2","toBeAdded","_context2","post","_callee3","obj","_context3","delete","concat","_callee4","_context4","put","_callee5","searchText","_context5","_callee6","_context6","CompletedTodoLists","filter","InCompleteTodoList","App","_this","call","setState","isTodoHomeVisible","isCompleteTodoVisible","isIncompleteTodoVisible","renderHome","event","preventDefault","state","Date","toISOString","keyCode","_x","_addTodosToStore","todoService","now","then","todoList","toConsumableArray","catch","error","alert","todoListCopy","_x2","_x3","_deleteTodoFromStore","splice","_x4","_markTodoCompleteInStore","target","_x6","_editTodo","searchTodoFromTodoList","valueToSearch","_x5","_searchTodosFromStore","storeTodoList","originalTodoList","editIndex","editedTodoValue","tempStorageForEdit","_this2","_fetchTodos","_this3","components_Header","todo_Nav","onBlur","onFocus","todo_TodoHome","todo_CompletedTodoLists","todo_InCompleteTodoList","AddTags","name","handleSubmit","_this$state","onSubmitTags","onSubmit","removeTags","editTag","isEditedTag","Main","_addTags","tagService","tagsListCopy","tags","_editTag","_deleteTags","_fetchTags","tags_AddTags","tags_DisplayTagsList","routes","AppRouter","BrowserRouter","Route","path","ROUTES","exact","component","ReactDOM","render","components_AppRouter","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b718d791.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\n/**\n * @param {function} handleComponentRender\n * Handles which component to render based on the flags.\n */\nconst Nav = ({ handleComponentRender }) => (\n  <div className=\"row navcontainer navbar\">\n    <div className=\"col-md-4 nav-list\">\n      <button\n        className=\"btn\"\n        onClick={() => handleComponentRender('renderTodoHome')}\n      >\n        <i className=\"fas fa-home icons\" />\n        <div>Home</div>\n      </button>\n    </div>\n    <div className=\"col-md-4 nav-list\">\n      <button\n        className=\"btn\"\n        onClick={() => handleComponentRender('renderCompletedTodoLists')}\n      >\n        <i className=\"fas fa-check icons\" />\n        <div>Completed</div>\n      </button>\n    </div>\n    <div className=\"col-md-4 nav-list\">\n      <button\n        className=\"btn\"\n        onClick={() => handleComponentRender('renderIncompleteTodoLists')}\n      >\n        <i className=\"fas fa-clipboard-list icons\" />\n        <div>Remaining</div>\n      </button>\n    </div>\n  </div>\n);\n\nNav.propTypes = {\n  handleComponentRender: PropTypes.func.isRequired\n};\n\nexport default Nav;\n","import React from 'react';\n\n/**\n *  Header component displays todo header.\n */\nconst Header = () => {\n  return (\n    <div className=\"row\">\n      <div className=\"col-md-12\">\n        <div className=\"todo-header\">TodoApp</div>\n      </div>\n    </div>\n  );\n};\n\nexport default Header;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\n/**\n * @param {Function} {\n *  InputTodoValue,\n *  addTodo = f => f,\n *  handleTextChange = f => f\n * }\n * .\n */\nconst AddTodoForm = ({\n  inputTodoValue,\n  addTodo = f => f,\n  handleTextChange = f => f\n}) => (\n  <div className=\"row\">\n    <div className=\"col-md-12 \">\n      <div className=\"input-group mb-3 input-container\">\n        <input\n          type=\"text\"\n          value={inputTodoValue}\n          placeholder=\"add your todo\"\n          onKeyUp={addTodo}\n          className=\"form-control input-todo\"\n          onChange={text => handleTextChange(text)}\n        />\n        <div className=\"input-group-append\">\n          <button onClick={addTodo} className=\"btn btn-primary add-todo-btn\">\n            Add\n          </button>\n        </div>\n      </div>\n    </div>\n  </div>\n);\n\nAddTodoForm.proTypes = {\n  addTodo: PropTypes.func.isRequired,\n  inputTodoValue: PropTypes.any.isRequired,\n  handleTextChange: PropTypes.func.isRequired\n};\n\nexport default AddTodoForm;\n","import React from 'react';\n\n/**\n * Hoc to display loader if data is not available.\n *\n * @param {component}  WrappedComponent\n * @returns Wrapped component or nothing to display text based on the data is empty or not.\n */\nconst withLoader = WrappedComponent => {\n  return class withLoader extends React.Component {\n    /**\n     * @returns WrappedComponent if data is not empty else returns nothing to display text.\n     */\n    render() {\n      const data = this.props.todos || this.props.tagsList;\n\n      return data.length !== 0 ? (\n        <WrappedComponent {...this.props} />\n      ) : (\n        <div className=\"default-text\">no todo to display</div>\n      );\n    }\n  };\n};\n\nexport default withLoader;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Spring } from 'react-spring';\n\nimport withLoader from '../hoc/LoaderHoc';\n\n/**\n * @class DisplayTodoList\n * @extends {React.Component}\n * displays all the todos based on the props passed to this component\n * displays buttons and checkboxes\n * handles delete and edit todo\n */\nclass DisplayTodoList extends React.Component {\n  /**\n   * @returns\n   * @memberof DisplayTodoList\n   */\n  render() {\n    const {\n      todos,\n      editTodo,\n      deleteTodo,\n      handleChange,\n      markTodoComplete\n    } = this.props;\n\n    return (\n      <div className=\"row\">\n        <div className=\"col-md-12 \">\n          <div className=\"todo-list-container\">\n            <ul>\n              {todos.map((value, index) => {\n                return (\n                  <li key={value.id}>\n                    <Spring\n                      from={{ opacity: 0 }}\n                      to={{ opacity: 1 }}\n                      config={{ duration: 500 }}\n                    >\n                      {props => (\n                        <div style={props} className=\"each-list clearfix\">\n                          {value.isEditedTodo ? (\n                            <input\n                              className=\"form-control edit-todo\"\n                              type=\"text\"\n                              value={value.todo}\n                              onChange={e => handleChange(value.todo, index, e)}\n                              onKeyUp={e =>\n                                e.key === 'Enter' && editTodo(index)\n                              }\n                            />\n                          ) : (\n                            <div className=\"todo-content-container clearfix\">\n                              <input\n                                className={\n                                  value.isEditedTodo\n                                    ? 'margin:12px 0'\n                                    : 'completed-check'\n                                }\n                                checked={value.isTodoCompleted}\n                                value={value.isEditedTodo}\n                                type=\"checkbox\"\n                                onChange={() => markTodoComplete(value, index)}\n                              />\n                              <div className=\"clearfix todo-wrapper\">\n                                <p\n                                  className={\n                                    value.isTodoCompleted\n                                      ? 'todo-text mark-todo-completed'\n                                      : 'todo-text'\n                                  }\n                                >\n                                  {value.todo}\n                                </p>\n                                <p className=\"todo-date\">\n                                  Created At:{value.date}\n                                </p>\n                              </div>\n                            </div>\n                          )}\n                          <div\n                            className={\n                              value.isEditedTodo\n                                ? 'whileEditInputIsOpen'\n                                : 'actions-btn-container'\n                            }\n                          >\n                            <button\n                              disabled={value.isTodoCompleted}\n                              className=\"btn btn-success action-btn\"\n                              onClick={() => editTodo(index)}\n                            >\n                              {value.isEditedTodo ? (\n                                <i className=\"fas fa-check\" />\n                              ) : (\n                                'Edit'\n                              )}\n                            </button>\n                            <button\n                              className=\"btn btn-danger action-btn\"\n                              onClick={() => deleteTodo(index, value)}\n                            >\n                              Delete\n                            </button>\n                          </div>\n                        </div>\n                      )}\n                    </Spring>\n                  </li>\n                );\n              })}\n            </ul>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nDisplayTodoList.propTypes = {\n  editIndex: PropTypes.number,\n  handleChange: PropTypes.func,\n  todos: PropTypes.array.isRequired,\n  editTodo: PropTypes.func.isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n  markTodoComplete: PropTypes.func.isRequired\n};\n\nexport default withLoader(DisplayTodoList);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport AddTodoForm from './AddTodoForm';\nimport DisplayTodoList from './DisplayTodoList';\n\n/**\n * @class TodoHome\n * @augments {React.Component}\n * initilly render on the screen\n * handles todo input field\n * and displays all todos no matter completed or not\n */\nclass TodoHome extends React.Component {\n  /**\n   * @returns AddTodoForm and DisplayTodoList.\n   * @memberof TodoHome\n   */\n  render() {\n    const {\n      todos,\n      addTodo,\n      isEdited,\n      inputTodoValue,\n      handleTextChange\n    } = this.props;\n\n    return (\n      <div>\n        <AddTodoForm\n          addTodo={addTodo}\n          isEdited={isEdited}\n          inputTodoValue={inputTodoValue}\n          handleTextChange={handleTextChange}\n        />\n        <DisplayTodoList todos={todos} {...this.props} />\n      </div>\n    );\n  }\n}\n\nTodoHome.propTypes = {\n  addTodo: PropTypes.func,\n  deleteTodo: PropTypes.func,\n  todos: PropTypes.array.isRequired,\n  markTodoCompleted: PropTypes.func\n};\n\nexport default TodoHome;\n","import axios from 'axios';\n\n/**\n * Base url for our api.\n */\nconst http = axios.create({\n  baseURL: 'https://personaltodo.herokuapp.com/'\n});\n\nexport default http;\n","export default {\n  TODOS: '/todos',\n  TAGS: '/tags'\n};\n","import http from '../utils/http';\nimport API from '../constants/api';\n\n/**\n * @param {Object} todo\n * Maps the value of from api with currently displayed todos.\n */\nconst mapResponseToTodo = todo => ({\n  ...todo,\n  todo: todo.todo\n});\n\n/**\n * @param {Object} todo\n * Maps the value of from frontend with value of todo in api.\n */\nconst mapTodoToResponse = todo => ({\n  ...todo,\n  description: todo.todo\n});\n\n/**\n * @returns All todos from api.\n */\nexport async function fetchTodos() {\n  try {\n    let data = await http.get(API.TODOS);\n\n    data = data.data.map(item => mapResponseToTodo(item));\n\n    return Promise.resolve(data);\n  } catch (err) {\n    return Promise.reject(err);\n  }\n}\n\n/**\n * @param {Object} toBeAdded\n * @returns Response from api either the data is added or not.\n */\nexport async function addTodosToStore(toBeAdded) {\n  try {\n    let data = mapTodoToResponse(toBeAdded);\n\n    data = await http.post(API.TODOS, data);\n\n    return Promise.resolve(data);\n  } catch (err) {\n    return Promise.reject(err);\n  }\n}\n\n/**\n * @param {Number} index\n * @param {Object} obj\n * @returns\n */\nexport async function deleteTodoFromStore(index, obj) {\n  try {\n    const data = await http.delete(API.TODOS + `/${obj.id}`);\n\n    return Promise.resolve(data);\n  } catch (error) {\n    return Promise.reject(error);\n  }\n}\n\n/**\n * @param {Object} obj\n */\nexport async function markTodoCompleteInStore(obj) {\n  try {\n    const data = await http.put(API.TODOS + `/${obj.id}`, { ...obj });\n\n    return Promise.resolve(data);\n  } catch (error) {\n    return Promise.reject(error);\n  }\n}\n\n/**\n * @param {String}searchText\n * @returns\n */\nexport async function searchTodosFromStore(searchText) {\n  try {\n    const data = await http.get(`${API.TODOS}?q=${searchText}&limit=7`);\n\n    return Promise.resolve(data);\n  } catch (error) {\n    return Promise.reject(error);\n  }\n}\n\n/**\n * @param {Object} obj\n * @returns\n */\nexport async function editTodo(obj) {\n  try {\n    const data = await http.put(API.TODOS + `/${obj.id}`, { ...obj });\n\n    return Promise.resolve(data);\n  } catch (error) {\n    return Promise.reject(error);\n  }\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport DisplayTodoList from './DisplayTodoList';\n\n/**\n * @param {props} props\n * GetCompletedTodos => select only the completed todos from the todolist.\n */\nconst CompletedTodoLists = props => {\n  const { todos } = props;\n  \n  /**\n   * @returns Completed todos.\n   */\n  function getCompletedTodos() {\n    return todos.filter(value => value.isTodoCompleted === true);\n  }\n\n  return <DisplayTodoList {...props} todos={getCompletedTodos()} />;\n};\n\nCompletedTodoLists.propTypes = {\n  props: PropTypes.any,\n  todos: PropTypes.array.isRequired\n};\n\nexport default CompletedTodoLists;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport DisplayTodoList from './DisplayTodoList';\n\n/**\n * @param {props} props\n * GetInCompleteTodos => select only the incomplete todos from the todolist.\n */\nconst InCompleteTodoList = props => {\n  const { todos } = props;\n\n  /**\n   * @returns Incomplete todos.\n   */\n  function getIncompleteTodos() {\n    return todos.filter(value => value.isTodoCompleted === false);\n  }\n\n  return <DisplayTodoList {...props} todos={getIncompleteTodos()} />;\n};\n\nInCompleteTodoList.propTypes = {\n  props: PropTypes.any,\n  todos: PropTypes.array.isRequired\n};\n\nexport default InCompleteTodoList;\n","import React, { Component } from 'react';\nimport { Spring as ReactSpring } from 'react-spring';\n\nimport Nav from './Nav';\nimport Header from '../Header';\nimport '../../assets/css/App.css';\nimport TodoHome from './TodoHome';\nimport * as todoService from '../../services/todo';\nimport CompletedTodoLists from './CompletedTodoLists';\nimport InCompleteTodoList from './InCompleteTodoList';\n\n/**\n * @class App\n * @param {Object} event\n * @augments {Component}\n */\nclass App extends Component {\n  /**\n   * Creates an instance of App.\n   *\n   * @param {*} props\n   * @memberof App\n   * .\n   */\n  constructor(props) {\n    super(props);\n    this.state = {\n      todoList: [],\n      isEdited: false,\n      editIndex: null,\n      valueToSearch: '',\n      inputTodoValue: '',\n      editedTodoValue: '',\n      isTodoCompleted: false,\n      isTodoHomeVisible: true,\n      isCompleteTodoVisible: false,\n      isIncompleteTodoVisible: false\n    };\n    this.originalTodoList = null;\n    this.tempStorageForEdit = null;\n  }\n\n  /**\n   * @memberof App\n   * Fetch data from api.\n   */\n  componentDidMount() {\n    todoService\n      .fetchTodos()\n      .then(todoList => {\n        this.setState({ todoList });\n      })\n      .catch(error => error);\n  }\n\n  /**\n   * @memberof App\n   * determines which component to render in the Dom.\n   * changes the flags based on the input text from nav component.\n   * @param {String}  text\n   */\n  handleComponentRender = text => {\n    switch (text) {\n      case 'renderTodoHome':\n        this.setState({\n          isTodoHomeVisible: true,\n          isCompleteTodoVisible: false,\n          isIncompleteTodoVisible: false\n        });\n        break;\n      case 'renderCompletedTodoLists':\n        this.setState({\n          isTodoHomeVisible: false,\n          isCompleteTodoVisible: true,\n          isIncompleteTodoVisible: false\n        });\n        break;\n      case 'renderIncompleteTodoLists':\n        this.setState({\n          isTodoHomeVisible: false,\n          isCompleteTodoVisible: false,\n          isIncompleteTodoVisible: true\n        });\n        break;\n      default:\n        this.setState({\n          renderHome: true\n        });\n    }\n  };\n\n  /**\n   * @memberof App\n   * Add new todo to the todoList array.\n   * Saves the added todo to the api.\n   * @param {Object} event\n   * Click or submit event after the todo text is completed.\n   * If todo is empty it doesnt allow to call the api.\n   */\n  addTodo = event => {\n    event.preventDefault();\n    const value = this.state.inputTodoValue;\n    const date = new Date().toISOString();\n\n    if (value !== '') {\n      if (event.keyCode === 13 || event.type === 'click') {\n        const toBeSavedTodo = {\n          id: Date.now(),\n          todo: value,\n          isEditedTodo: false,\n          isTodoCompleted: false,\n          date: date\n        };\n\n        todoService\n          .addTodosToStore(toBeSavedTodo)\n          .then(data => {\n            this.setState({\n              todoList: [...this.state.todoList, data.data],\n              inputTodoValue: ''\n            });\n          })\n          .catch(error => error);\n      }\n    } else {\n      alert('please input the todo');\n    }\n  };\n\n  /**\n   * @memberof App\n   * Deletes a particular  todo from the todolist array uisng the index.\n   * Sends the object to be deleted to the api.\n   * @param {Number} index\n   * Index of object to be deleted.\n   */\n  deleteTodo = index => {\n    const todoListCopy = this.state.todoList.map(todo => ({ ...todo }));\n    const obj = todoListCopy[index];\n\n    todoService\n      .deleteTodoFromStore(index, obj)\n      .then(() => {\n        todoListCopy.splice(index, 1);\n        this.setState({\n          todoList: todoListCopy\n        });\n      })\n      .catch(error => error);\n  };\n\n  /**\n   * @memberof App\n   * Marks the todo is completed using checkbox.\n   * @param {Object} value\n   * @param {Number} index\n   * Index of the object in array which is to be marked completed or not.\n   */\n  markTodoComplete = (value, index) => {\n    const todoListCopy = this.state.todoList.map(todo => ({ ...todo }));\n    const obj = todoListCopy[index];\n\n    obj.isTodoCompleted = !obj.isTodoCompleted;\n    todoService\n      .markTodoCompleteInStore(obj)\n      .then(data => {\n        todoListCopy[index] = data.data;\n        this.setState({\n          todoList: todoListCopy\n        });\n      })\n      .catch(error => error);\n  };\n\n  handleTextChange = event => {\n    this.setState({\n      inputTodoValue: event.target.value\n    });\n  };\n\n  /**\n   * @memberof App\n   * edit the todo text using the index\n   * @param {Number} index\n   * Index of object which edit field is to be toggled.\n   * Edit the todo in api.\n   */\n  editTodo = index => {\n    const todoListCopy = this.state.todoList.map(todo => ({ ...todo }));\n\n    todoListCopy[index].isEditedTodo = !todoListCopy[index].isEditedTodo;\n    if (!todoListCopy[index].isEditedTodo) {\n      todoService.editTodo(todoListCopy[index]);\n    }\n    this.setState({\n      todoList: todoListCopy\n    });\n  };\n\n  /**\n   * @memberof App\n   * Handles changes to the edited text form edit input field of todo.\n   * @param {Object} value\n   * @param {Number} index\n   * @param {Object} event\n   */\n  handleChange = (value, index, event) => {\n    const todoListCopy = this.state.todoList.map(todo => ({ ...todo }));\n\n    todoListCopy[index].todo = event ? event.target.value : value;\n    this.setState({\n      todoList: todoListCopy\n    });\n  };\n\n  /**\n   * @memberof App\n   * Search the todo from the todo list array and also in api.\n   * @param {Object}event\n   */\n  searchTodoFromTodoList = event => {\n    const value = event.target.value;\n    let todoListCopy = this.state.todoList.map(todo => ({ ...todo }));\n\n    this.setState({ valueToSearch: value });\n    todoService\n      .searchTodosFromStore(this.state.valueToSearch)\n      .then(data => {\n        todoListCopy = data.data;\n        this.setState({ todoList: todoListCopy });\n      })\n      .catch(error => error);\n  };\n\n  /**\n   * @memberof App\n   * store the value of the list of todos in state\n   */\n  storeTodoList = () => {\n    this.setState({ todoList: this.originalTodoList });\n  };\n\n  /**\n   * @returns => Components based on the current active flags.\n   * Pass states and functions as props to their respective components.\n   * @memberof App\n   */\n  render() {\n    return (\n      <ReactSpring\n        from={{ opacity: 0 }}\n        to={{ opacity: 1 }}\n        config={{ duration: 1000 }}\n      >\n        {props => (\n          <div style={props} className=\"container todo-container\">\n            <Header />\n            <Nav handleComponentRender={this.handleComponentRender} />\n            <input\n              type=\"text\"\n              placeholder=\"search\"\n              value={this.state.searchText}\n              className=\"form-control search-text-box\"\n              onBlur={this.storeTodoList}\n              onChange={event => this.searchTodoFromTodoList(event)}\n              onFocus={() => (this.originalTodoList = this.state.todoList)}\n            />\n            {this.state.isTodoHomeVisible && (\n              <TodoHome\n                addTodo={this.addTodo}\n                editTodo={this.editTodo}\n                todos={this.state.todoList}\n                deleteTodo={this.deleteTodo}\n                isEdited={this.state.isEdited}\n                editIndex={this.state.editIndex}\n                handleChange={this.handleChange}\n                markTodoComplete={this.markTodoComplete}\n                handleTextChange={this.handleTextChange}\n                inputTodoValue={this.state.inputTodoValue}\n                editedTodoValue={this.state.editedTodoValue}\n              />\n            )}\n            {this.state.isCompleteTodoVisible && (\n              <CompletedTodoLists\n                addTodo={this.addTodo}\n                editTodo={this.editTodo}\n                todos={this.state.todoList}\n                deleteTodo={this.deleteTodo}\n                isEdited={this.state.isEdited}\n                editIndex={this.state.editIndex}\n                markTodoComplete={this.markTodoComplete}\n                handleTextChange={this.handleTextChange}\n                inputTodoValue={this.state.inputTodoValue}\n                editedTodoValue={this.state.editedTodoValue}\n              />\n            )}\n            {this.state.isIncompleteTodoVisible && (\n              <InCompleteTodoList\n                addTodo={this.addTodo}\n                editTodo={this.editTodo}\n                todos={this.state.todoList}\n                deleteTodo={this.deleteTodo}\n                isEdited={this.state.isEdited}\n                editIndex={this.state.editIndex}\n                handleTextChange={this.handleTextChange}\n                markTodoComplete={this.markTodoComplete}\n                inputTodoValue={this.state.inputTodoValue}\n                editedTodoValue={this.state.editedTodoValue}\n              />\n            )}\n          </div>\n        )}\n      </ReactSpring>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\n/**\n * @class AddTags\n * @extends {React.Component}\n * form to add tags\n */\nclass AddTags extends React.Component {\n  /**\n   * @param {*} props\n   */\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: '',\n      type: ''\n    };\n  }\n\n  /**\n    @memberof AddTags\n   * handle state change of the input tags fields(name,type)\n   * @param {changeTextInInputField} event\n    */\n  handleChange = event => {\n    const { name } = event.target;\n\n    if (name === 'tagName') {\n      this.setState({ name: event.target.value });\n    } else if (name === 'tagType') {\n      this.setState({ type: event.target.value });\n    }\n  };\n\n  /**\n   * @memberof AddTags\n   * Submit the input data.\n   * @param {tagsSubmit} event\n   * Pass the name and type event to parent class onSubmitTags function.\n   */\n  handleSubmit = event => {\n    event.preventDefault();\n    const { name, type } = this.state;\n\n    if (name !== '' && type !== '') {\n      this.props.onSubmitTags(this.state.name, this.state.type);\n      this.setState({ name: '', type: '' });\n    } else {\n      alert('please check your input fields');\n    }\n  };\n\n  /**\n   * @returns => Name and type input field.\n   * @memberof AddTags\n   */\n  render() {\n    return (\n      <div className=\"row\">\n        <div className=\"col-md-12 tags-input-container\">\n          <form onSubmit={this.handleSubmit}>\n            <label>Name:</label>\n            <input\n              value={this.state.name}\n              name=\"tagName\"\n              onChange={this.handleChange}\n              type=\"text\"\n              placeholder=\"enter tag name\"\n              className=\"form-control tags-input\"\n            />\n            <label>Type:</label>\n            <input\n              value={this.state.type}\n              onChange={this.handleChange}\n              name=\"tagType\"\n              type=\"text\"\n              placeholder=\"enter tag type\"\n              className=\"form-control tags-input\"\n            />\n            <button\n              type=\"submit\"\n              value=\"submit\"\n              className=\"btn btn-success add-tags-btn\"\n            >\n              Add\n            </button>\n          </form>\n        </div>\n      </div>\n    );\n  }\n}\n\nAddTags.propTypes = {\n  onSubmitTags: PropTypes.func.isRequired\n};\nexport default AddTags;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport withLoader from '../hoc/LoaderHoc';\n\n/**\n * @class DisplayTagsList\n * @extends {React.Component}\n */\nclass DisplayTagsList extends React.Component {\n  /**\n   * @returns Jsx to display tags.\n   * @memberof DisplayTagsList\n   */\n  render() {\n    const { tagsList, removeTags, editTag } = this.props;\n    \n    return (\n      <div className=\"row tagsContainer\">\n        <div className=\"col-md-12 todo-list\">\n          <ul>\n            {tagsList.map((value, index) => (\n              <li key={value.id}>\n                <div className=\"each-list clearfix\">\n                  {value.isEditedTag ? (\n                    <input\n                      type=\"text\"\n                      className=\"form-control edit-tags-input\"\n                    />\n                  ) : (\n                    <div className=\"tags-content-container\">\n                      <div>{value.name}</div>\n                      <div>{value.type}</div>\n                    </div>\n                  )}\n                  <div className=\"actions-btn-container tags-action-btn\">\n                    <button\n                      className=\"btn btn-success tags-btn\"\n                      onClick={() => editTag(index)}\n                    >\n                      Edit\n                    </button>\n                    <button\n                      className=\"btn btn-danger tags-btn\"\n                      onClick={() => removeTags(index)}\n                    >\n                      Delete\n                    </button>\n                  </div>\n                </div>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nDisplayTagsList.propTypes = {\n  tagsList: PropTypes.array.isRequired\n};\nexport default withLoader(DisplayTagsList);\n","import http from '../utils/http';\nimport API from '../constants/api';\n\n/**\n * @returns Tags form api.\n */\nexport async function fetchTags() {\n  try {\n    let data = await http.get(API.TAGS);\n\n    data = data.data;\n\n    return Promise.resolve(data);\n  } catch (error) {\n    return Promise.reject(error);\n  }\n}\n\n/**\n * @param {Object} obj\n * @returns Added data to the api.\n */\nexport async function addTags(obj) {\n  try {\n    const data = await http.post(API.TAGS, obj);\n\n    return Promise.resolve(data);\n  } catch (error) {\n    return Promise.reject(error);\n  }\n}\n\n/**\n * @param {Number} id\n * @returns\n */\nexport async function deleteTags(id) {\n  try {\n    const data = await http.delete(API.TAGS + `/${id}`);\n\n    return Promise.resolve(data);\n  } catch (error) {\n    return Promise.reject(error);\n  }\n}\n\n/**\n * @param {Object} obj\n * @returns Edited tags object from api.\n */\nexport async function editTag(obj) {\n  try {\n    const data = await http.put(API.TAGS + `/${obj.id}`, { ...obj });\n    \n    return Promise.resolve(data);\n  } catch (error) {\n    return Promise.reject(error);\n  }\n}\n","import React from 'react';\n\nimport Header from '../Header';\nimport AddTags from './AddTags';\nimport DisplayTagsList from './DisplayTagsList';\nimport * as tagService from '../../services/tags';\n/**\n * @param {Number} index\n * @class Main\n * @augments {React.Component}\n */\nclass Main extends React.Component {\n  /**\n   * Creates an instance of Main.\n   *\n   * @param {*} props\n   * @memberof Main\n   */\n  constructor(props) {\n    super(props);\n    this.state = {\n      tagsList: []\n    };\n  }\n\n  /**\n   * Fetch tags from api.\n   *\n   * @memberof Main\n   */\n  componentDidMount() {\n    tagService\n      .fetchTags()\n      .then(tagsList => this.setState({ tagsList }))\n      .catch(error => error);\n  }\n\n  /**\n   * @memberof Main\n   * @param {String} name\n   * @param {String} type\n   */\n  onSubmitTags = (name, type) => {\n    const tagsTobeSaved = {\n      id: Date.now(),\n      name: name,\n      type: type,\n      isEditedTag: false\n    };\n\n    tagService\n      .addTags(tagsTobeSaved)\n      .then(data => {\n        this.setState({\n          tagsList: [...this.state.tagsList, data.data]\n        });\n      })\n      .catch(error => error);\n  };\n\n  editTag = index => {\n    const tagsListCopy = this.state.tagsList.map(tags => ({ ...tags }));\n\n    tagsListCopy[index].isEditedTag = !tagsListCopy[index].isEditedTag;\n\n    if (!tagsListCopy[index].isEditedTodo) {\n      tagService\n        .editTag(tagsListCopy[index])\n        .then(data => {\n          tagsListCopy[index] = data.data;\n          this.setState({\n            tagsList: tagsListCopy\n          });\n        })\n        .catch(error => error);\n    }\n  };\n\n  /**\n   * @memberof Main\n   * @param {Number} index\n   */\n  removeTags = index => {\n    const tagsListCopy = this.state.tagsList.map(tags => ({ ...tags }));\n    const obj = tagsListCopy[index];\n\n    tagService\n      .deleteTags(obj.id)\n      .then(() => {\n        tagsListCopy.splice(index, 1);\n        this.setState({\n          tagsList: tagsListCopy\n        });\n      })\n      .catch(error => error);\n  };\n\n  /**\n   * @returns Components.\n   * @memberof Main\n   */\n  render() {\n    return (\n      <div className=\"container tags-container\">\n        <Header />\n        <AddTags onSubmitTags={this.onSubmitTags} />\n        <DisplayTagsList\n          tagsList={this.state.tagsList}\n          removeTags={this.removeTags}\n          editTag={this.editTag}\n        />\n      </div>\n    );\n  }\n}\n\nexport default Main;\n","export default {\n  TODO_APP: '/',\n  TODO_COMPLETED: '/complete',\n  TAGS: '/tags'\n};\n","import React from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\n\nimport App from './todo/App';\nimport Main from './tags/Main';\nimport ROUTES from '../constants/routes';\n\n/**\n * Router.\n */\nconst AppRouter = () => (\n  <Router>\n    <div>\n      <Route path={ROUTES.TODO_APP} exact component={App} />\n      <Route path={ROUTES.TAGS} exact component={Main} />\n    </div>\n  </Router>\n);\n\nexport default AppRouter;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\n\nimport './assets/css/index.css';\nimport AppRouter from './components/AppRouter';\n\nReactDOM.render(<AppRouter />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}